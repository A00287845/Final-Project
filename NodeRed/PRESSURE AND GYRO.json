[
    {
        "id": "6c2ee2c66b4cfc5d",
        "type": "tab",
        "label": "Pressure and Gyroscope MQTT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "382690a637ad27e8",
        "type": "inject",
        "z": "6c2ee2c66b4cfc5d",
        "name": "Run on start",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 470,
        "y": 280,
        "wires": [
            [
                "10975e122612f34b"
            ]
        ]
    },
    {
        "id": "ebdd9d909fbc993d",
        "type": "debug",
        "z": "6c2ee2c66b4cfc5d",
        "name": "pressure debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 200,
        "wires": []
    },
    {
        "id": "10975e122612f34b",
        "type": "pythonshell in",
        "z": "6c2ee2c66b4cfc5d",
        "name": "SenseHat Pressure/Gyrpscope",
        "pyfile": "/home/eoghan/sense_hat_values.py",
        "virtualenv": "",
        "continuous": true,
        "stdInData": true,
        "x": 730,
        "y": 280,
        "wires": [
            [
                "875f6a4cd9adcbe4",
                "4c1d75e860d47dd0"
            ]
        ]
    },
    {
        "id": "875f6a4cd9adcbe4",
        "type": "function",
        "z": "6c2ee2c66b4cfc5d",
        "name": "Extract Pressure Reading",
        "func": "// Function to extract the pressure from the message\nfunction extractPressure(message) {\n    // Find the start index of \"Pressure:\" in the message\n    var startIndex = message.indexOf(\"Pressure:\") + 9;\n    // Find the end index by locating the comma after the pressure value\n    var endIndex = message.indexOf(\"Millibars\", startIndex);\n    // Extract the pressure substring and trim any extra spaces\n    var pressureString = message.substring(startIndex, endIndex).trim();\n    // Convert the pressure string to a floating-point number\n    var pressureValue = parseFloat(pressureString);\n    return pressureValue;\n}\n\n// Call the function with the actual message content\nmsg.payload = extractPressure(msg.payload);\n\n// Return the modified message object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 260,
        "wires": [
            [
                "ebdd9d909fbc993d",
                "d0562a03add64b39"
            ]
        ]
    },
    {
        "id": "d0562a03add64b39",
        "type": "mqtt out",
        "z": "6c2ee2c66b4cfc5d",
        "name": "a00287845/device/rpi/sensors/pressure",
        "topic": "a00287845/device/rpi/sensors/pressure",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8d230c7b23e504df",
        "x": 1320,
        "y": 240,
        "wires": []
    },
    {
        "id": "4c1d75e860d47dd0",
        "type": "function",
        "z": "6c2ee2c66b4cfc5d",
        "name": "Extract Gyroscope Reading",
        "func": "// Function to extract and correct gyroscope data from the message\nfunction extractGyroscope(message) {\n    // Find the JSON substring that starts with '{' and ends with '}'\n    var startIndex = message.indexOf('{');\n    var endIndex = message.indexOf('}') + 1;\n    // Extract the JSON substring\n    var gyroscopeString = message.substring(startIndex, endIndex);\n    // Replace single quotes with double quotes to correct JSON formatting\n    var correctedGyroscopeString = gyroscopeString.replace(/'/g, '\"');\n    // Parse the corrected JSON string into a JavaScript object\n    var gyroscopeData;\n    try {\n        gyroscopeData = JSON.parse(correctedGyroscopeString);\n    } catch (error) {\n        node.error(\"Failed to parse gyroscope data: \" + error.message);\n        return null; // Return null or handle the error as needed\n    }\n    return gyroscopeData;\n}\n\n// Call the function with the actual message content\nmsg.payload = extractGyroscope(msg.payload);\n\n// Return the modified message object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 300,
        "wires": [
            [
                "ea0e6b7e86c8b6fa",
                "44e37d3ba4fc7b24"
            ]
        ]
    },
    {
        "id": "ea0e6b7e86c8b6fa",
        "type": "debug",
        "z": "6c2ee2c66b4cfc5d",
        "name": "gyroscope debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 360,
        "wires": []
    },
    {
        "id": "44e37d3ba4fc7b24",
        "type": "mqtt out",
        "z": "6c2ee2c66b4cfc5d",
        "name": "a00287845/device/rpi/sensors/gyroscope",
        "topic": "a00287845/device/rpi/sensors/gyroscope",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8d230c7b23e504df",
        "x": 1320,
        "y": 320,
        "wires": []
    },
    {
        "id": "8d230c7b23e504df",
        "type": "mqtt-broker",
        "name": "HiveMqttA00287845",
        "broker": "ssl://930094acb7da4acfbf5761b3ac2c7c90.s1.eu.hivemq.cloud:8883",
        "port": "8884",
        "tls": "",
        "clientid": "NodeRed-EoghanPi",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]